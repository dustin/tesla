-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Tesla API client.
--   
--   Please see the README on GitHub at
--   <a>https://github.com/dustin/tesla#readme</a>
@package tesla
@version 0.7.1.1


-- | Authentication related data structures.
module Tesla.Auth

-- | An Authentication request.
data AuthInfo
AuthInfo :: String -> String -> String -> String -> String -> AuthInfo
[_clientID] :: AuthInfo -> String
[_clientSecret] :: AuthInfo -> String
[_email] :: AuthInfo -> String
[_password] :: AuthInfo -> String
[_bearerToken] :: AuthInfo -> String
clientID :: Lens' AuthInfo String
clientSecret :: Lens' AuthInfo String
email :: Lens' AuthInfo String
password :: Lens' AuthInfo String
bearerToken :: Lens' AuthInfo String

-- | Get an AuthInfo instance from a bearer token.
fromToken :: String -> AuthInfo

-- | An Authentication response.
data AuthResponse
AuthResponse :: String -> Int -> String -> AuthResponse
[_access_token] :: AuthResponse -> String
[_expires_in] :: AuthResponse -> Int
[_refresh_token] :: AuthResponse -> String
access_token :: Lens' AuthResponse String
expires_in :: Lens' AuthResponse Int
refresh_token :: Lens' AuthResponse String

-- | A Monad may have a <a>HasTeslaAuth</a> instance to indicate it knows
--   how to authenticate against the Tesla service.
class Monad m => HasTeslaAuth m
teslaAuth :: HasTeslaAuth m => m AuthInfo
instance Data.Aeson.Types.FromJSON.FromJSON Tesla.Auth.AuthResponse
instance Data.Aeson.Types.ToJSON.ToJSON Tesla.Auth.AuthResponse
instance GHC.Show.Show Tesla.Auth.AuthResponse
instance GHC.Generics.Generic Tesla.Auth.AuthResponse
instance GHC.Show.Show Tesla.Auth.AuthInfo


-- | <tt>Tesla</tt> is intended to provide access to all known Tesla APIs
--   as documented at <a>https://www.teslaapi.io/</a>
module Tesla

-- | Fail to authenticate to the Tesla service.

-- | <i>Deprecated: Tesla busted authentication pretty hard. See
--   <a>https://github.com/dustin/tesla</a> for more info.</i>
authenticate :: AuthInfo -> IO AuthResponse

-- | Refresh authentication credentials using a refresh token.
refreshAuth :: AuthResponse -> IO AuthResponse

-- | An Authentication response.
data AuthResponse
AuthResponse :: String -> Int -> String -> AuthResponse
[_access_token] :: AuthResponse -> String
[_expires_in] :: AuthResponse -> Int
[_refresh_token] :: AuthResponse -> String

-- | Tesla Product Types.
data Product
ProductVehicle :: Text -> VehicleID -> VehicleState -> Product
[_vehicleName] :: Product -> Text
[_vehicleID] :: Product -> VehicleID
[_vehicleState] :: Product -> VehicleState
ProductEnergy :: EnergyID -> Product
[_energyID] :: Product -> EnergyID
ProductPowerwall :: EnergyID -> Double -> Double -> Double -> Text -> Double -> Product
[_pwID] :: Product -> EnergyID
[_pwBatteryPower] :: Product -> Double
[_pwEnergyLeft] :: Product -> Double
[_pwCharged] :: Product -> Double
[_pwName] :: Product -> Text
[_pwTotal] :: Product -> Double
vehicleName :: Traversal' Product Text
vehicleID :: Traversal' Product VehicleID
vehicleState :: Traversal' Product VehicleState
energyID :: Traversal' Product EnergyID
_ProductVehicle :: Prism' Product (Text, VehicleID, VehicleState)
_ProductEnergy :: Prism' Product EnergyID
_ProductPowerwall :: Prism' Product (EnergyID, Double, Double, Double, Text, Double)
pwBatteryPower :: Traversal' Product Double
pwCharged :: Traversal' Product Double
pwEnergyLeft :: Traversal' Product Double
pwID :: Traversal' Product EnergyID
pwName :: Traversal' Product Text
pwTotal :: Traversal' Product Double

-- | A VehicleID.
type VehicleID = Text

-- | Get a mapping of vehicle name to vehicle ID.
vehicles :: [Product] -> Map Text Text

-- | Get all products associated with this account.
products :: MonadIO m => AuthInfo -> m [Product]

-- | productsRaw retrieves the complete response for products
productsRaw :: (FromJSON j, MonadIO m) => AuthInfo -> m j

-- | Possible states a vehicle may be in.
data VehicleState
VOnline :: VehicleState
VOffline :: VehicleState
VAsleep :: VehicleState
VWaking :: VehicleState
VUnknown :: VehicleState
vsFromString :: Text -> VehicleState

-- | An energy site ID.
type EnergyID = Integer

-- | Get a list of Solar ID installations.
energyIDs :: [Product] -> [EnergyID]

-- | Get an AuthInfo instance from a bearer token.
fromToken :: String -> AuthInfo

-- | Get a set of wreq options from an <a>AuthInfo</a>.
authOpts :: AuthInfo -> Options
baseURL :: String

-- | Decode a products response into a list of products.
decodeProducts :: Value -> [Product]
instance GHC.Classes.Eq Tesla.VehicleState
instance GHC.Read.Read Tesla.VehicleState
instance GHC.Show.Show Tesla.VehicleState
instance GHC.Classes.Eq Tesla.Product
instance GHC.Read.Read Tesla.Product
instance GHC.Show.Show Tesla.Product


-- | Access of energy-specific APIs.
module Tesla.Energy

-- | Run a Energy Monad with the given Vehicle ID
runEnergy :: MonadIO m => IO AuthInfo -> EnergyID -> Energy m a -> m a

-- | Fetch the "live_status" describing the current active state of an
--   energy site.
siteData :: (FromJSON j, MonadIO m) => Energy m j

-- | Fetch the "site_info" describing the basic configuration of an energy
--   site.
siteConfig :: (FromJSON j, MonadIO m) => Energy m j

-- | Energy Monad for accessing energy-specific things.
data Energy m a
instance Control.Monad.Logger.MonadLogger m => Control.Monad.Logger.MonadLogger (Tesla.Energy.Energy m)
instance Control.Monad.Fail.MonadFail m => Control.Monad.Fail.MonadFail (Tesla.Energy.Energy m)
instance GHC.Base.Monad m => Control.Monad.Reader.Class.MonadReader Tesla.Energy.EnergyEnv (Tesla.Energy.Energy m)
instance Control.Monad.Catch.MonadMask m => Control.Monad.Catch.MonadMask (Tesla.Energy.Energy m)
instance Control.Monad.Catch.MonadThrow m => Control.Monad.Catch.MonadThrow (Tesla.Energy.Energy m)
instance Control.Monad.Catch.MonadCatch m => Control.Monad.Catch.MonadCatch (Tesla.Energy.Energy m)
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (Tesla.Energy.Energy m)
instance GHC.Base.Monad m => GHC.Base.Monad (Tesla.Energy.Energy m)
instance GHC.Base.Functor m => GHC.Base.Functor (Tesla.Energy.Energy m)
instance GHC.Base.Applicative m => GHC.Base.Applicative (Tesla.Energy.Energy m)
instance GHC.Classes.Eq Tesla.Energy.BadEnergyException
instance GHC.Show.Show Tesla.Energy.BadEnergyException
instance GHC.Exception.Type.Exception Tesla.Energy.BadEnergyException
instance Control.Monad.IO.Unlift.MonadUnliftIO m => Control.Monad.IO.Unlift.MonadUnliftIO (Tesla.Energy.Energy m)
instance (GHC.Base.Monad m, Control.Monad.IO.Class.MonadIO m, Control.Monad.Reader.Class.MonadReader Tesla.Energy.EnergyEnv m) => Tesla.Auth.HasTeslaAuth m


-- | Access of car-specific APIs.
module Tesla.Car

-- | Car Monad for accessing car-specific things.
data Car m a

-- | Run a Car Monad with the given Vehicle ID
runCar :: MonadIO m => IO AuthInfo -> VehicleID -> Car m a -> m a

-- | Run a Car Monad by looking up a car by name.
runNamedCar :: MonadIO m => Text -> IO AuthInfo -> Car m a -> m a

-- | A VehicleID.
type VehicleID = Text

-- | Fetch the VehicleData.
vehicleData :: MonadIO m => Car m VehicleData

-- | Get the nearby chargers.
nearbyChargers :: MonadIO m => Car m [Charger]

-- | vehicleStatus returns the current status of the current vehicle.
vehicleStatus :: MonadIO m => Car m VehicleState

-- | isAwake returns true if the current vehicle is awake and online.
isAwake :: MonadIO m => Car m Bool

-- | Giant blob of VehicleData describing all known state of the vehicle.
--   
--   This is not separated into discrete fields because that's easy enough
--   to do with Aeson and Lens when you need it but some convenience
--   methods for common accesses are available in this module.
type VehicleData = ByteString

-- | True if a user is present in the vehicle.
isUserPresent :: VehicleData -> Bool

-- | True of the vehicle is currently charging.
isCharging :: VehicleData -> Bool

-- | Get the timestamp from this VehicleData or error if there isn't one.
teslaTS :: VehicleData -> UTCTime

-- | Get the timestamp from this VehicleData if present.
maybeTeslaTS :: VehicleData -> Maybe UTCTime

-- | The various doors.
data Door
DriverFront :: Door
DriverRear :: Door
PassengerFront :: Door
PassengerRear :: Door
FrontTrunk :: Door
RearTrunk :: Door
data OpenState a
Closed :: a -> OpenState a
Open :: a -> OpenState a
_Open :: forall a_aun1. Prism' (OpenState a_aun1) a_aun1
_Closed :: forall a_aun1. Prism' (OpenState a_aun1) a_aun1

-- | Return a list of doors and their OpenState.
doors :: VehicleData -> Maybe [OpenState Door]

-- | Return a list of open doors.
openDoors :: VehicleData -> [Door]

-- | Location, Location, Location.
data Location
Location :: Double -> Double -> Location
[$sel:_lat:Location] :: Location -> Double
[$sel:_lon:Location] :: Location -> Double

-- | A destination charger (provided by nearbyChargers).
data DestinationCharger
DestinationCharger :: Location -> Text -> Double -> DestinationCharger
[$sel:_location:DestinationCharger] :: DestinationCharger -> Location
[$sel:_name:DestinationCharger] :: DestinationCharger -> Text
[$sel:_distance_miles:DestinationCharger] :: DestinationCharger -> Double

-- | A supercharger (provided by nearbyChargers).
data Supercharger
Supercharger :: Location -> Text -> Double -> Int -> Int -> Bool -> Supercharger
[$sel:_location:Supercharger] :: Supercharger -> Location
[$sel:_name:Supercharger] :: Supercharger -> Text
[$sel:_distance_miles:Supercharger] :: Supercharger -> Double
[$sel:_available_stalls:Supercharger] :: Supercharger -> Int
[$sel:_total_stalls:Supercharger] :: Supercharger -> Int
[$sel:_site_closed:Supercharger] :: Supercharger -> Bool

-- | Eitehr a Supercharger or Destination charger.
data Charger
SC :: Supercharger -> Charger
DC :: DestinationCharger -> Charger

-- | Return only the superchargers from a Charger list.
superchargers :: [Charger] -> [Supercharger]

-- | Return only the destination chargers from a Charger list.
destinationChargers :: [Charger] -> [DestinationCharger]
lat :: Lens' Location Double
lon :: Lens' Location Double
_SC :: Prism' Charger Supercharger
_DC :: Prism' Charger DestinationCharger

-- | Prism for viewing <a>VehicleData</a> as an Aeson <a>Value</a>.
vdata :: Prism' VehicleData Value
name :: HasName s a => Lens' s a
location :: HasLocation s a => Lens' s a
distance_miles :: HasDistance_miles s a => Lens' s a
available_stalls :: HasAvailable_stalls s a => Lens' s a
total_stalls :: HasTotal_stalls s a => Lens' s a
site_closed :: HasSite_closed s a => Lens' s a

-- | Get the URL for a named endpoint for a given vehicle.
vehicleURL :: VehicleID -> String -> String

-- | Get the current vehicle ID from the Car Monad.
currentVehicleID :: MonadReader CarEnv m => m VehicleID
instance GHC.Show.Show Tesla.Car.Charger
instance Tesla.Car.HasTotal_stalls Tesla.Car.Supercharger GHC.Types.Int
instance Tesla.Car.HasSite_closed Tesla.Car.Supercharger GHC.Types.Bool
instance Tesla.Car.HasAvailable_stalls Tesla.Car.Supercharger GHC.Types.Int
instance Tesla.Car.HasDistance_miles Tesla.Car.Supercharger GHC.Types.Double
instance Tesla.Car.HasLocation Tesla.Car.Supercharger Tesla.Car.Location
instance Tesla.Car.HasName Tesla.Car.Supercharger Data.Text.Internal.Text
instance Data.Aeson.Types.FromJSON.FromJSON Tesla.Car.Supercharger
instance GHC.Generics.Generic Tesla.Car.Supercharger
instance GHC.Show.Show Tesla.Car.Supercharger
instance Tesla.Car.HasName Tesla.Car.DestinationCharger Data.Text.Internal.Text
instance Tesla.Car.HasLocation Tesla.Car.DestinationCharger Tesla.Car.Location
instance Tesla.Car.HasDistance_miles Tesla.Car.DestinationCharger GHC.Types.Double
instance Data.Aeson.Types.FromJSON.FromJSON Tesla.Car.DestinationCharger
instance GHC.Generics.Generic Tesla.Car.DestinationCharger
instance GHC.Show.Show Tesla.Car.DestinationCharger
instance Data.Aeson.Types.FromJSON.FromJSON Tesla.Car.Location
instance GHC.Generics.Generic Tesla.Car.Location
instance GHC.Show.Show Tesla.Car.Location
instance Control.Monad.Logger.MonadLogger m => Control.Monad.Logger.MonadLogger (Tesla.Car.Car m)
instance Control.Monad.Fail.MonadFail m => Control.Monad.Fail.MonadFail (Tesla.Car.Car m)
instance GHC.Base.Monad m => Control.Monad.Reader.Class.MonadReader Tesla.Car.CarEnv (Tesla.Car.Car m)
instance Control.Monad.Catch.MonadMask m => Control.Monad.Catch.MonadMask (Tesla.Car.Car m)
instance Control.Monad.Catch.MonadThrow m => Control.Monad.Catch.MonadThrow (Tesla.Car.Car m)
instance Control.Monad.Catch.MonadCatch m => Control.Monad.Catch.MonadCatch (Tesla.Car.Car m)
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (Tesla.Car.Car m)
instance GHC.Base.Monad m => GHC.Base.Monad (Tesla.Car.Car m)
instance GHC.Base.Functor m => GHC.Base.Functor (Tesla.Car.Car m)
instance GHC.Base.Applicative m => GHC.Base.Applicative (Tesla.Car.Car m)
instance GHC.Classes.Eq Tesla.Car.BadCarException
instance GHC.Classes.Eq Tesla.Car.Door
instance GHC.Enum.Enum Tesla.Car.Door
instance GHC.Enum.Bounded Tesla.Car.Door
instance GHC.Show.Show Tesla.Car.Door
instance GHC.Classes.Eq a => GHC.Classes.Eq (Tesla.Car.OpenState a)
instance GHC.Show.Show a => GHC.Show.Show (Tesla.Car.OpenState a)
instance GHC.Show.Show Tesla.Car.BadCarException
instance GHC.Exception.Type.Exception Tesla.Car.BadCarException
instance Control.Monad.IO.Unlift.MonadUnliftIO m => Control.Monad.IO.Unlift.MonadUnliftIO (Tesla.Car.Car m)
instance (GHC.Base.Monad m, Control.Monad.IO.Class.MonadIO m, Control.Monad.Reader.Class.MonadReader Tesla.Car.CarEnv m) => Tesla.Auth.HasTeslaAuth m


-- | Executing commands within the Car Monad.
module Tesla.Car.Command

-- | Data type representing local time in minutes since midnight.
newtype Time
Time :: Finite 1440 -> Time

-- | Make a <a>Time</a> with the given hours and minutes.
mkTime :: Finite 24 -> Finite 60 -> Time

-- | Get the hours and minutes out of a <a>Time</a>.
fromTime :: Time -> (Finite 24, Finite 60)

-- | Run a command with a JSON payload.
runCmd :: MonadIO m => String -> [Pair] -> Car m CommandResponse

-- | Run command without a payload
runCmd' :: MonadIO m => String -> Car m CommandResponse

-- | A CommandResponse wraps an Either such that Left represents a failure
--   message and Right suggests the command was successful.
type CommandResponse = Either Text ()

-- | Car Monad for accessing car-specific things.
data Car m a
(.=) :: (KeyValue kv, ToJSON v) => Key -> v -> kv

-- | Build a simple named command car that posts to the given named
--   endpoint.
mkCommand :: String -> String -> Q [Dec]

-- | Build a bunch of commands from a list of named endpoints, defining
--   functions by removing the common prefix.
mkCommands :: [String] -> Q [Dec]

-- | Make commands with given names.
mkNamedCommands :: [(String, String)] -> Q [Dec]
instance GHC.Show.Show Tesla.Car.Command.Time
instance GHC.Num.Num Tesla.Car.Command.Time
instance Network.Wreq.Internal.Types.FormValue Tesla.Car.Command.Time
instance Data.Aeson.Types.ToJSON.ToJSON Tesla.Car.Command.Time
instance Network.Wreq.Internal.Types.FormValue GHC.Types.Bool

module Tesla.Car.Command.Windows
ventWindows :: MonadIO m => Car m CommandResponse
closeWindows :: MonadIO m => (Double, Double) -> Car m CommandResponse
ventSunroof :: MonadIO m => Car m CommandResponse
closeSunroof :: MonadIO m => Car m CommandResponse

module Tesla.Car.Command.Valet
setValetMode :: MonadIO m => Bool -> Int -> Car m CommandResponse
clearValetPIN :: forall {m}. MonadIO m => Car m CommandResponse

module Tesla.Car.Command.SpeedLimit
speedLimit :: MonadIO m => Int -> Car m CommandResponse
activateSpeedLimit :: MonadIO m => Int -> Car m CommandResponse
deactivateSpeedLimit :: MonadIO m => Int -> Car m CommandResponse
clearSpeedLimitPIN :: MonadIO m => Int -> Car m CommandResponse

module Tesla.Car.Command.Software

-- | Schedule a software update in this many seconds.
scheduleUpdate :: MonadIO m => Int -> Car m CommandResponse

-- | Cancel a scheduled software update.
cancelUpdate :: forall {m}. MonadIO m => Car m CommandResponse

module Tesla.Car.Command.Sharing
share :: MonadIO m => Text -> Car m CommandResponse

module Tesla.Car.Command.Sentry
setSentryMode :: MonadIO m => Bool -> Car m CommandResponse

module Tesla.Car.Command.RemoteStart
remoteStart :: forall {m}. MonadIO m => Car m CommandResponse

module Tesla.Car.Command.Media
volumeDown :: forall {m}. MonadIO m => Car m CommandResponse
volumeUp :: forall {m}. MonadIO m => Car m CommandResponse
prevFav :: forall {m}. MonadIO m => Car m CommandResponse
nextFav :: forall {m}. MonadIO m => Car m CommandResponse
prevTrack :: forall {m}. MonadIO m => Car m CommandResponse
nextTrack :: forall {m}. MonadIO m => Car m CommandResponse
togglePlayback :: forall {m}. MonadIO m => Car m CommandResponse

module Tesla.Car.Command.Homelink

-- | Trigger nearby homelink with the given (lat,lon)
trigger :: MonadIO m => (Double, Double) -> Car m CommandResponse

module Tesla.Car.Command.Doors
actuateFrontTrunk :: MonadIO m => Car m CommandResponse
actuateRearTrunk :: MonadIO m => Car m CommandResponse
lockDoors :: forall {m}. MonadIO m => Car m CommandResponse
unlockDoors :: forall {m}. MonadIO m => Car m CommandResponse

module Tesla.Car.Command.Climate
hvacOn :: forall {m}. MonadIO m => Car m CommandResponse
hvacOff :: forall {m}. MonadIO m => Car m CommandResponse
data ClimateKeeper
ClimateKeeperOff :: ClimateKeeper
ClimateKeeperDefault :: ClimateKeeper
DogMode :: ClimateKeeper
CampMode :: ClimateKeeper
climateKeeper :: MonadIO m => ClimateKeeper -> Car m CommandResponse

-- | Set heating levels for various seats.
heatSeat :: MonadIO m => Seat -> Int -> Car m CommandResponse

-- | Set cooling levels for various seats.
coolSeat :: MonadIO m => Seat -> Int -> Car m CommandResponse
data Seat
DriverSeat :: Seat
PassengerSeat :: Seat
RearLeftSeat :: Seat
RearCenterSeat :: Seat
RearRightSeat :: Seat

-- | Set the main HVAC temperatures.
setTemps :: MonadIO m => (Double, Double) -> Car m CommandResponse

-- | Turn on the steering wheel heater
wheelHeater :: MonadIO m => Bool -> Car m CommandResponse
wheelHeaterOff :: MonadIO m => Car m CommandResponse
wheelHeaterOn :: MonadIO m => Car m CommandResponse
maxDefrost :: MonadIO m => Bool -> Car m CommandResponse
wakeUp :: forall {m}. MonadIO m => Car m CommandResponse

-- | Turn on or off bioweapon defense mode.
--   
--   If HVAC is off, turning on bioweapon defense mode will also turn on
--   HVAC.
bioweaponMode :: MonadIO m => Bool -> Car m CommandResponse

-- | When configuring scheduled departure, preconditioning and off-peak
--   charging both have weekday only options.
data Sometimes
Never :: Sometimes
Always :: Sometimes
WeekdaysOnly :: Sometimes

-- | Configuration for off-peak charging for a schedule departure.
data OffPeakConfig
OffPeakConfig :: Sometimes -> Time -> OffPeakConfig
[_offPeakEnabled] :: OffPeakConfig -> Sometimes
[_offPeakEndTime] :: OffPeakConfig -> Time

-- | Type alias to make <a>scheduleDeparture</a> more readable.
type Preconditioning = Sometimes
scheduledDepartureOff :: MonadIO m => Car m CommandResponse

-- | Schedule a departure.
--   
--   For this to do anything useful, you need to specify at least one of
--   <a>Preconditioning</a> and/or <a>OffPeakConfig</a>.
scheduleDeparture :: MonadIO m => Time -> Preconditioning -> Maybe OffPeakConfig -> Car m CommandResponse
instance GHC.Enum.Enum Tesla.Car.Command.Climate.ClimateKeeper
instance GHC.Enum.Bounded Tesla.Car.Command.Climate.ClimateKeeper
instance GHC.Show.Show Tesla.Car.Command.Climate.ClimateKeeper
instance GHC.Classes.Eq Tesla.Car.Command.Climate.ClimateKeeper
instance Data.Aeson.Types.ToJSON.ToJSON Tesla.Car.Command.Climate.ClimateKeeper

module Tesla.Car.Command.Charging
startCharging :: forall {m}. MonadIO m => Car m CommandResponse
stopCharging :: forall {m}. MonadIO m => Car m CommandResponse

-- | Set the desired charge level (percent).
setLimit :: MonadIO m => Int -> Car m CommandResponse
openChargePort :: forall {m}. MonadIO m => Car m CommandResponse
closeChargePort :: forall {m}. MonadIO m => Car m CommandResponse

-- | Set the charge current.
setAmps :: MonadIO m => Int -> Car m CommandResponse

-- | Disable scheduled charging.
scheduledChargingOff :: MonadIO m => Car m CommandResponse

-- | Schedule charging for the given number of minutes after midnight
--   (local time).
scheduleCharging :: MonadIO m => Time -> Car m CommandResponse

module Tesla.Car.Command.Alerts
honkHorn :: forall {m}. MonadIO m => Car m CommandResponse
flashLights :: forall {m}. MonadIO m => Car m CommandResponse


-- | All of the commands supported by this library.
--   
--   This is meant to be imported qualified, e.g.:
--   
--   <pre>
--   import qualified Tesla.Commands as CMD
--   </pre>
module Tesla.Car.Commands
